# Phi_{k,n} operator has k-simplices of G as vertices
# 2 subgraphs are adjacent if they lie in common simplex with at most m vertices (pg. 136) 
# https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html

# k simplex is complex graph with k+1 vertices

def Phi(g, k,n):
  all_cliques= nx.enumerate_all_cliques(g)

  k = 3
  m = 2
  k_cliques=[x for x in all_cliques if len(x)== k+1 ]

  # create new graph with vertex set k_cliques

  # map from index to set
  map1 = {}
  map2 = {} # backwards map
  ind1=0

  for x in k_cliques:
      map1[ind1] = x 
      map2[x] = ind1
      ind1= ind1+1

  adj_mat = np.zeros((ind1,ind1))
  new_edge_list = []

  # check adjacency up to m vertices

  for c1 in k_cliques:
      for c2 in k_cliques:
          index1 = map2[c1]
          index2 = map2[c2]
          # compare lists for same elements
          if c1 == c2:
              continue
          counter1 = collections.Counter(c1)
          counter2 = collections.Counter(c2)
          set_list1 = set(tuple(d for d in sorted(counter1)))
          set_list2 = set(tuple(d for d in sorted(counter2)))
          intersect = set_list1.intersection(set_list2)
          ilen = len(intersect)
          if ilen> m:
              # add edge
              adj_mat[index1, index2] = 1
              adj_mat[index2, index1] = 1
              new_edge_list.append((index1, index2))
              new_edge_list.append((index2, index1))
              
  return adj_mat, new_edge_list          
