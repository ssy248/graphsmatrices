# partition them by searching for leaves (degree 1 ) and vertices of degree 2 , slowly adding their neighbors to the group 

deg1v = []
deg2v = []

groups1 = {}
groups2 = {}
ind1 = 0
ind2 = 0

ind=0
for row in adj_mat:
	deg_row = sum(row)
	if deg_row==1:
		deg1v.append(ind)
        groups1[ind1] = ind
	if deg_row==2:
		deg2v.append(ind)
        groups2[ind2] = ind
    
	ind=ind+1
    
 # optimal assignment of groups based on these roots ; the groups may overlap : if they overlap, then use the 
# boolean product ? 

# propagate for k steps 
# from leaves 
n_groups = ind 
k = 5

for g in groups1:
    root = groups1[g]
    current_gp = [root]
    # extract the neighbors 
    row = np.array(adj_mat[root])
    nbrs = np.where(row == 1)
    current_gp.extend(nbrs)
    groups1[g] = current_gp 

# continue

for steps in range(k-1):
    # join the neighbors to the groups
    for g in groups1:
        roots = groups1[g] 
        current_gp = roots
        for r in roots:
            row = np.array(adj_mat[r])
            nbrs = np.where(row == 1)
            current_gp.extend(nbrs)
        groups1[g] = np.unique(current_gp)
    
# count the number of matching vertex or edge labels between the groups of the graphs

vertex_labels = [] # input 

vlab_map = {}

for g in groups1:
    v_labels = []
    for vertex in g:
        lab = vertex_labels[vertex]
        v_labels.append(lab)
    
    vlab_map[g] = v_labels

    
